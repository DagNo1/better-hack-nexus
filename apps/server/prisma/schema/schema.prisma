generator client {
  provider     = "prisma-client"
  output       = "../generated"
  moduleFormat = "esm"
  runtime      = "nodejs"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id        String   @id @default(cuid()) @map("_id")
  name      String
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members ProjectMember[]
  folders Folder[]
}

model Folder {
  id        String   @id @default(cuid()) @map("_id")
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String?
  parentId  String?  @map("parent_id")

  members   FolderMember[]
  project   Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parent    Folder?        @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children  Folder[]       @relation("FolderChildren")
  files     File[]

  @@map("folders")
}

model ProjectMember {
  id        String   @id @default(cuid()) @map("_id")
  projectId String
  userId    String
  role      String
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
  @@map("project_members")
}

model FolderMember {
  id        String   @id @default(cuid()) @map("_id")
  folderId  String
  userId    String
  role      String
  createdAt DateTime @default(now())

  folder Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  @@unique([folderId, userId])
  @@map("folder_members")
}

model File {
  id        String   @id @default(cuid()) @map("_id")
  name      String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  folderId  String

  folder Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@map("files")
}
